#include <stdint.h>

#define READ_BUF_SIZE 2048
#define HEADER_SIZE 12
#define PORT 9000

static const uint32_t RCODE_MASK = 0x000F;

/* Response Type */
enum {
  Ok_ResponseType = 0,
  FormatError_ResponseType = 1,
  ServerFailure_ResponseType = 2,
  NameError_ResponseType = 3,
  NotImplemented_ResponseType = 4,
  Refused_ResponseType = 5
};

/* Resource Record Types */
enum {
  A_Resource_RecordType = 1,  /* IPv4 address */
  NS_Resource_RecordType = 2,
  CNAME_Resource_RecordType = 5,
  SOA_Resource_RecordType = 6,
  PTR_Resource_RecordType = 12,
  MX_Resource_RecordType = 15,
  TXT_Resource_RecordType = 16,
  AAAA_Resource_RecordType = 28, /* IPv6 address */
  SRV_Resource_RecordType = 33
};

/* Operation Code */
enum {
  QUERY_OperationCode = 0, /* standard query */
  IQUERY_OperationCode = 1, /* inverse query */
  STATUS_OperationCode = 2, /* server status request */
  NOTIFY_OperationCode = 4, /* request zone transfer */
  UPDATE_OperationCode = 5 /* change resource records */
};

/* Response Code */
enum {
  NoError_ResponseCode = 0,
  FormatError_ResponseCode = 1,
  ServerFailure_ResponseCode = 2,
  NameError_ResponseCode = 3
};

/* Query Type */
enum {
  IXFR_QueryType = 251,
  AXFR_QueryType = 252,
  MAILB_QueryType = 253,
  MAILA_QueryType = 254,
  STAR_QueryType = 255
};

/*
* Types.
*/

/* Header Section */
struct Header {
  uint16_t id; /* An 16-bit integer generated by client, helping it to match a response to a query */

  /* Flags */
  /* Query/Response Flag: used to differentiate if a message is a query or a response. 
     A response should change it from 0 to 1 */
  uint16_t qr;
  uint16_t opcode; /* Operation Code */
  /* Authoritative Answer Flag: This bit is set to 1 in a response to indicate that the server that created
     the response is authoritative for the zone in which the domain name specified in the Question section is
     located. If it is 0, the response is non-authoritative. */
  uint16_t aa; 
  uint16_t tc; /* Truncation Flag */
  uint16_t rd; /* Recursion Desired */
  /* Recursion Available flag: Set to 1 or cleared to 0 in a response to indicate whether the server creating
     the response supports recursive queries.*/
  uint16_t ra;
  uint16_t rcode; /* Response Code */

  uint16_t qd_count; /* Question Count */
  uint16_t an_count; /* Answer Record Count */
  uint16_t ns_count; /* Authority Record Count */
  uint16_t ar_count; /* Additional Record Count */
};

/* Question Section */
struct Question {
  /*
   * the queried domain name, encoded using standard DNS name notation. The "standard DNS name notation"
   * encodes www.google.com to 3www6google3com0.
  */
  char *q_name;
  uint16_t q_type;
  uint16_t q_class;
};

/* Resource Record Section */
struct ResourceRecord {
  char *name;
  uint16_t type;
  uint16_t class;
  uint32_t ttl;
  /* Resource Data Length: Indicates the size of the RData field, in bytes. */
  uint16_t rd_length;
  unsigned char* rd_data;
};

struct Message {

  struct Header *header;
  /* At least one question; questions are copied to the response 1:1 */
  struct Question *question;
  struct ResourceRecord *answer;
  /*
   * DNS protocol supports these ResourceRecords as well, but seems we dont have convenient
   * ways to test them, so they are not implemented.
   * struct ResourceRecord *authority;
   * struct ResourceRecord *additional;
   */
};