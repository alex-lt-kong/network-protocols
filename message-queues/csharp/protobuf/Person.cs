// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: person.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PbTest
{

    /// <summary>Holder for reflection information generated from person.proto</summary>
    public static partial class PersonReflection
    {

        #region Descriptor
        /// <summary>File descriptor for person.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static PersonReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CgxwZXJzb24ucHJvdG8SB3BiX3Rlc3Qi6gIKBlBlcnNvbhIMCgRuYW1lGAEg",
                  "ASgJEgoKAmlkGAIgASgNEg0KBWVtYWlsGAMgASgJEhIKBnNjb3JlcxgQIAMo",
                  "AkICEAESKwoGcGhvbmVzGAQgAygLMhsucGJfdGVzdC5QZXJzb24uUGhvbmVO",
                  "dW1iZXISDwoHYWRkcmVzcxgIIAEoCRITCgtuYXRpb25hbGl0eRgJIAEoCRIR",
                  "CgliaXRydGhkYXkYCiABKAkSFAoMY3JlYXRpb25EYXRlGAsgASgJEhIKCnVw",
                  "ZGF0ZURhdGUYDCABKAkSGAoQc2VsZkludHJvZHVjdGlvbhgNIAEoCRpMCgtQ",
                  "aG9uZU51bWJlchIOCgZudW1iZXIYASABKA0SLQoEdHlwZRgCIAEoDjIZLnBi",
                  "X3Rlc3QuUGVyc29uLlBob25lVHlwZToESE9NRSIrCglQaG9uZVR5cGUSCgoG",
                  "TU9CSUxFEAASCAoESE9NRRABEggKBFdPUksQAg=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PbTest.Person), global::PbTest.Person.Parser, new[]{ "Name", "Id", "Email", "Scores", "Phones", "Address", "Nationality", "Bitrthday", "CreationDate", "UpdateDate", "SelfIntroduction" }, null, new[]{ typeof(global::PbTest.Person.Types.PhoneType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::PbTest.Person.Types.PhoneNumber), global::PbTest.Person.Types.PhoneNumber.Parser, new[]{ "Number", "Type" }, null, null, null, null)})
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class Person : pb::IMessage<Person>
    {
        private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Person> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::PbTest.PersonReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Person()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Person(Person other) : this()
        {
            _hasBits0 = other._hasBits0;
            name_ = other.name_;
            id_ = other.id_;
            email_ = other.email_;
            scores_ = other.scores_.Clone();
            phones_ = other.phones_.Clone();
            address_ = other.address_;
            nationality_ = other.nationality_;
            bitrthday_ = other.bitrthday_;
            creationDate_ = other.creationDate_;
            updateDate_ = other.updateDate_;
            selfIntroduction_ = other.selfIntroduction_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Person Clone()
        {
            return new Person(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name
        {
            get { return name_ ?? NameDefaultValue; }
            set
            {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName
        {
            get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName()
        {
            name_ = null;
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 2;
        private readonly static uint IdDefaultValue = 0;

        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                id_ = value;
            }
        }
        /// <summary>Gets whether the "id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasId
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearId()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "email" field.</summary>
        public const int EmailFieldNumber = 3;
        private readonly static string EmailDefaultValue = "";

        private string email_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Email
        {
            get { return email_ ?? EmailDefaultValue; }
            set
            {
                email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "email" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEmail
        {
            get { return email_ != null; }
        }
        /// <summary>Clears the value of the "email" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEmail()
        {
            email_ = null;
        }

        /// <summary>Field number for the "scores" field.</summary>
        public const int ScoresFieldNumber = 16;
        private static readonly pb::FieldCodec<float> _repeated_scores_codec
            = pb::FieldCodec.ForFloat(130);
        private readonly pbc::RepeatedField<float> scores_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Scores
        {
            get { return scores_; }
        }

        /// <summary>Field number for the "phones" field.</summary>
        public const int PhonesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::PbTest.Person.Types.PhoneNumber> _repeated_phones_codec
            = pb::FieldCodec.ForMessage(34, global::PbTest.Person.Types.PhoneNumber.Parser);
        private readonly pbc::RepeatedField<global::PbTest.Person.Types.PhoneNumber> phones_ = new pbc::RepeatedField<global::PbTest.Person.Types.PhoneNumber>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::PbTest.Person.Types.PhoneNumber> Phones
        {
            get { return phones_; }
        }

        /// <summary>Field number for the "address" field.</summary>
        public const int AddressFieldNumber = 8;
        private readonly static string AddressDefaultValue = "";

        private string address_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Address
        {
            get { return address_ ?? AddressDefaultValue; }
            set
            {
                address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "address" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAddress
        {
            get { return address_ != null; }
        }
        /// <summary>Clears the value of the "address" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAddress()
        {
            address_ = null;
        }

        /// <summary>Field number for the "nationality" field.</summary>
        public const int NationalityFieldNumber = 9;
        private readonly static string NationalityDefaultValue = "";

        private string nationality_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nationality
        {
            get { return nationality_ ?? NationalityDefaultValue; }
            set
            {
                nationality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "nationality" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNationality
        {
            get { return nationality_ != null; }
        }
        /// <summary>Clears the value of the "nationality" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNationality()
        {
            nationality_ = null;
        }

        /// <summary>Field number for the "bitrthday" field.</summary>
        public const int BitrthdayFieldNumber = 10;
        private readonly static string BitrthdayDefaultValue = "";

        private string bitrthday_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Bitrthday
        {
            get { return bitrthday_ ?? BitrthdayDefaultValue; }
            set
            {
                bitrthday_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "bitrthday" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBitrthday
        {
            get { return bitrthday_ != null; }
        }
        /// <summary>Clears the value of the "bitrthday" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBitrthday()
        {
            bitrthday_ = null;
        }

        /// <summary>Field number for the "creationDate" field.</summary>
        public const int CreationDateFieldNumber = 11;
        private readonly static string CreationDateDefaultValue = "";

        private string creationDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CreationDate
        {
            get { return creationDate_ ?? CreationDateDefaultValue; }
            set
            {
                creationDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "creationDate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasCreationDate
        {
            get { return creationDate_ != null; }
        }
        /// <summary>Clears the value of the "creationDate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearCreationDate()
        {
            creationDate_ = null;
        }

        /// <summary>Field number for the "updateDate" field.</summary>
        public const int UpdateDateFieldNumber = 12;
        private readonly static string UpdateDateDefaultValue = "";

        private string updateDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string UpdateDate
        {
            get { return updateDate_ ?? UpdateDateDefaultValue; }
            set
            {
                updateDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "updateDate" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasUpdateDate
        {
            get { return updateDate_ != null; }
        }
        /// <summary>Clears the value of the "updateDate" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearUpdateDate()
        {
            updateDate_ = null;
        }

        /// <summary>Field number for the "selfIntroduction" field.</summary>
        public const int SelfIntroductionFieldNumber = 13;
        private readonly static string SelfIntroductionDefaultValue = "";

        private string selfIntroduction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SelfIntroduction
        {
            get { return selfIntroduction_ ?? SelfIntroductionDefaultValue; }
            set
            {
                selfIntroduction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "selfIntroduction" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSelfIntroduction
        {
            get { return selfIntroduction_ != null; }
        }
        /// <summary>Clears the value of the "selfIntroduction" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSelfIntroduction()
        {
            selfIntroduction_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Person);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Person other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Name != other.Name) return false;
            if (Id != other.Id) return false;
            if (Email != other.Email) return false;
            if (!scores_.Equals(other.scores_)) return false;
            if (!phones_.Equals(other.phones_)) return false;
            if (Address != other.Address) return false;
            if (Nationality != other.Nationality) return false;
            if (Bitrthday != other.Bitrthday) return false;
            if (CreationDate != other.CreationDate) return false;
            if (UpdateDate != other.UpdateDate) return false;
            if (SelfIntroduction != other.SelfIntroduction) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasName) hash ^= Name.GetHashCode();
            if (HasId) hash ^= Id.GetHashCode();
            if (HasEmail) hash ^= Email.GetHashCode();
            hash ^= scores_.GetHashCode();
            hash ^= phones_.GetHashCode();
            if (HasAddress) hash ^= Address.GetHashCode();
            if (HasNationality) hash ^= Nationality.GetHashCode();
            if (HasBitrthday) hash ^= Bitrthday.GetHashCode();
            if (HasCreationDate) hash ^= CreationDate.GetHashCode();
            if (HasUpdateDate) hash ^= UpdateDate.GetHashCode();
            if (HasSelfIntroduction) hash ^= SelfIntroduction.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasName)
            {
                output.WriteRawTag(10);
                output.WriteString(Name);
            }
            if (HasId)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(Id);
            }
            if (HasEmail)
            {
                output.WriteRawTag(26);
                output.WriteString(Email);
            }
            phones_.WriteTo(output, _repeated_phones_codec);
            if (HasAddress)
            {
                output.WriteRawTag(66);
                output.WriteString(Address);
            }
            if (HasNationality)
            {
                output.WriteRawTag(74);
                output.WriteString(Nationality);
            }
            if (HasBitrthday)
            {
                output.WriteRawTag(82);
                output.WriteString(Bitrthday);
            }
            if (HasCreationDate)
            {
                output.WriteRawTag(90);
                output.WriteString(CreationDate);
            }
            if (HasUpdateDate)
            {
                output.WriteRawTag(98);
                output.WriteString(UpdateDate);
            }
            if (HasSelfIntroduction)
            {
                output.WriteRawTag(106);
                output.WriteString(SelfIntroduction);
            }
            scores_.WriteTo(output, _repeated_scores_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
            }
            if (HasId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (HasEmail)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
            }
            size += scores_.CalculateSize(_repeated_scores_codec);
            size += phones_.CalculateSize(_repeated_phones_codec);
            if (HasAddress)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
            }
            if (HasNationality)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Nationality);
            }
            if (HasBitrthday)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Bitrthday);
            }
            if (HasCreationDate)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CreationDate);
            }
            if (HasUpdateDate)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateDate);
            }
            if (HasSelfIntroduction)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SelfIntroduction);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Person other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasName)
            {
                Name = other.Name;
            }
            if (other.HasId)
            {
                Id = other.Id;
            }
            if (other.HasEmail)
            {
                Email = other.Email;
            }
            scores_.Add(other.scores_);
            phones_.Add(other.phones_);
            if (other.HasAddress)
            {
                Address = other.Address;
            }
            if (other.HasNationality)
            {
                Nationality = other.Nationality;
            }
            if (other.HasBitrthday)
            {
                Bitrthday = other.Bitrthday;
            }
            if (other.HasCreationDate)
            {
                CreationDate = other.CreationDate;
            }
            if (other.HasUpdateDate)
            {
                UpdateDate = other.UpdateDate;
            }
            if (other.HasSelfIntroduction)
            {
                SelfIntroduction = other.SelfIntroduction;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Name = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 26:
                        {
                            Email = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            phones_.AddEntriesFrom(input, _repeated_phones_codec);
                            break;
                        }
                    case 66:
                        {
                            Address = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            Nationality = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            Bitrthday = input.ReadString();
                            break;
                        }
                    case 90:
                        {
                            CreationDate = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            UpdateDate = input.ReadString();
                            break;
                        }
                    case 106:
                        {
                            SelfIntroduction = input.ReadString();
                            break;
                        }
                    case 130:
                    case 133:
                        {
                            scores_.AddEntriesFrom(input, _repeated_scores_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Person message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum PhoneType
            {
                [pbr::OriginalName("MOBILE")] Mobile = 0,
                [pbr::OriginalName("HOME")] Home = 1,
                [pbr::OriginalName("WORK")] Work = 2,
            }

            public sealed partial class PhoneNumber : pb::IMessage<PhoneNumber>
            {
                private static readonly pb::MessageParser<PhoneNumber> _parser = new pb::MessageParser<PhoneNumber>(() => new PhoneNumber());
                private pb::UnknownFieldSet _unknownFields;
                private int _hasBits0;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<PhoneNumber> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::PbTest.Person.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PhoneNumber()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PhoneNumber(PhoneNumber other) : this()
                {
                    _hasBits0 = other._hasBits0;
                    number_ = other.number_;
                    type_ = other.type_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PhoneNumber Clone()
                {
                    return new PhoneNumber(this);
                }

                /// <summary>Field number for the "number" field.</summary>
                public const int NumberFieldNumber = 1;
                private readonly static uint NumberDefaultValue = 0;

                private uint number_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Number
                {
                    get { if ((_hasBits0 & 1) != 0) { return number_; } else { return NumberDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 1;
                        number_ = value;
                    }
                }
                /// <summary>Gets whether the "number" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasNumber
                {
                    get { return (_hasBits0 & 1) != 0; }
                }
                /// <summary>Clears the value of the "number" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearNumber()
                {
                    _hasBits0 &= ~1;
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 2;
                private readonly static global::PbTest.Person.Types.PhoneType TypeDefaultValue = global::PbTest.Person.Types.PhoneType.Home;

                private global::PbTest.Person.Types.PhoneType type_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::PbTest.Person.Types.PhoneType Type
                {
                    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
                    set
                    {
                        _hasBits0 |= 2;
                        type_ = value;
                    }
                }
                /// <summary>Gets whether the "type" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool HasType
                {
                    get { return (_hasBits0 & 2) != 0; }
                }
                /// <summary>Clears the value of the "type" field</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearType()
                {
                    _hasBits0 &= ~2;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as PhoneNumber);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(PhoneNumber other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Number != other.Number) return false;
                    if (Type != other.Type) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (HasNumber) hash ^= Number.GetHashCode();
                    if (HasType) hash ^= Type.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (HasNumber)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(Number);
                    }
                    if (HasType)
                    {
                        output.WriteRawTag(16);
                        output.WriteEnum((int)Type);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (HasNumber)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Number);
                    }
                    if (HasType)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(PhoneNumber other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.HasNumber)
                    {
                        Number = other.Number;
                    }
                    if (other.HasType)
                    {
                        Type = other.Type;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    Number = input.ReadUInt32();
                                    break;
                                }
                            case 16:
                                {
                                    Type = (global::PbTest.Person.Types.PhoneType)input.ReadEnum();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    #endregion

}

#endregion Designer generated code
